<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/dashboard.css">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            background: rgba(255,255,255,0.1);
            padding: 30px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
        }

        .header h1 {
            font-size: 3em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(255,255,255,0.15);
            padding: 25px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        .card h3 {
            margin-bottom: 20px;
            color: #fff;
            font-size: 1.5em;
        }

        .status-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .status-item:last-child {
            border-bottom: none;
        }

        .status-indicator {
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: bold;
        }

        .status-success {
            background: rgba(76, 175, 80, 0.3);
            color: #4CAF50;
        }

        .status-warning {
            background: rgba(255, 193, 7, 0.3);
            color: #FFC107;
        }

        .status-error {
            background: rgba(244, 67, 54, 0.3);
            color: #f44336;
        }

        .actions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-top: 30px;
        }

        .action-button {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
            border: none;
            padding: 20px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 1.1em;
            font-weight: bold;
            transition: all 0.3s ease;
            text-align: center;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .action-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
        }

        .action-button.secondary {
            background: linear-gradient(45deg, #2196F3, #1976D2);
        }

        .action-button.warning {
            background: linear-gradient(45deg, #FF9800, #F57C00);
        }

        .terminal-container {
            background: rgba(0,0,0,0.8);
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            font-family: 'Courier New', monospace;
        }

        .terminal-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #444;
        }

        .terminal-output {
            background: #1e1e1e;
            color: #00ff00;
            padding: 15px;
            border-radius: 5px;
            min-height: 200px;
            max-height: 400px;
            overflow-y: auto;
            font-size: 14px;
            line-height: 1.4;
        }

        .command-input {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .command-input input {
            flex: 1;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background: #333;
            color: white;
            font-family: 'Courier New', monospace;
        }

        .command-input button {
            padding: 10px 20px;
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 5% auto;
            padding: 30px;
            border-radius: 15px;
            width: 80%;
            max-width: 600px;
            color: white;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: white;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }

        .form-group input {
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 8px;
            background: rgba(255,255,255,0.9);
            color: #333;
            font-size: 16px;
        }

        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
            .actions-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üêâ KALI DRAGON</h1>
            <p>Web Wizard Dashboard v4.0</p>
            <p><em>Ultimate Kali Linux MCP Management Interface</em></p>
        </div>

        <div class="dashboard-grid">
            <!-- System Status -->
            <div class="card">
                <h3>üìä System Status</h3>
                <div class="status-item">
                    <span>Operating System</span>
                    <span class="status-indicator status-success"><%= state.os %></span>
                </div>
                <div class="status-item">
                    <span>Node.js</span>
                    <span class="status-indicator status-success"><%= state.nodeVersion %></span>
                </div>
                <div class="status-item">
                    <span>Python</span>
                    <span class="status-indicator <%= state.pythonInstalled ? 'status-success' : 'status-error' %>">
                        <%= state.pythonInstalled ? '‚úÖ Available' : '‚ùå Missing' %>
                    </span>
                </div>
                <div class="status-item">
                    <span>Docker</span>
                    <span class="status-indicator <%= state.dockerInstalled ? 'status-success' : 'status-warning' %>">
                        <%= state.dockerInstalled ? '‚úÖ Available' : '‚ö†Ô∏è Missing' %>
                    </span>
                </div>
                <div class="status-item">
                    <span>SSH</span>
                    <span class="status-indicator <%= state.sshAvailable ? 'status-success' : 'status-error' %>">
                        <%= state.sshAvailable ? '‚úÖ Available' : '‚ùå Missing' %>
                    </span>
                </div>
                <div class="status-item">
                    <span>Kali Connection</span>
                    <span class="status-indicator <%= state.kaliConnected ? 'status-success' : 'status-warning' %>">
                        <%= state.kaliConnected ? '‚úÖ Connected' : '‚ö†Ô∏è Not Connected' %>
                    </span>
                </div>
                <div class="status-item">
                    <span>MCP Server</span>
                    <span class="status-indicator <%= state.mcpServerRunning ? 'status-success' : 'status-warning' %>">
                        <%= state.mcpServerRunning ? '‚úÖ Running' : '‚ö†Ô∏è Stopped' %>
                    </span>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="card">
                <h3>üöÄ Quick Actions</h3>
                <div class="actions-grid">
                    <button class="action-button" onclick="openKaliSetup()">
                        <span>üêß</span>
                        <span>Setup Kali Linux</span>
                    </button>
                    <button class="action-button secondary" onclick="checkSystem()">
                        <span>üîç</span>
                        <span>System Check</span>
                    </button>
                    <button class="action-button secondary" onclick="openTerminal()">
                        <span>üíª</span>
                        <span>Open Terminal</span>
                    </button>
                    <button class="action-button warning" onclick="installDependencies()">
                        <span>üì¶</span>
                        <span>Install Dependencies</span>
                    </button>
                    <button class="action-button" onclick="startMCPServer()">
                        <span>üöÄ</span>
                        <span>Start MCP Server</span>
                    </button>
                    <button class="action-button secondary" onclick="openDocumentation()">
                        <span>üìö</span>
                        <span>Documentation</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Terminal -->
        <div class="card terminal-container" id="terminal" style="display: none;">
            <div class="terminal-header">
                <h3>üíª Kali Dragon Terminal</h3>
                <button onclick="clearTerminal()" style="background: #666; color: white; border: none; padding: 5px 10px; border-radius: 3px;">Clear</button>
            </div>
            <div class="terminal-output" id="terminal-output">
                <div style="color: #4CAF50;">üêâ Kali Dragon Terminal Ready</div>
                <div style="color: #2196F3;">Type commands below or use Quick Actions above</div>
                <div>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</div>
            </div>
            <div class="command-input">
                <input type="text" id="command-input" placeholder="Enter command..." onkeypress="handleKeyPress(event)">
                <button onclick="executeCommand()">Execute</button>
            </div>
        </div>
    </div>

    <!-- Kali Setup Modal -->
    <div id="kali-setup-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('kali-setup-modal')">&times;</span>
            <h2>üêß Kali Linux Setup</h2>
            <p>Configure connection to your Kali Linux VM</p>
            
            <form id="kali-setup-form" onsubmit="setupKali(event)">
                <div class="form-group">
                    <label for="kali-host">Kali VM IP Address:</label>
                    <input type="text" id="kali-host" name="host" placeholder="192.168.1.100" required>
                </div>
                
                <div class="form-group">
                    <label for="kali-username">Username:</label>
                    <input type="text" id="kali-username" name="username" placeholder="kali" required>
                </div>
                
                <div class="form-group">
                    <label for="kali-password">Password:</label>
                    <input type="password" id="kali-password" name="password" placeholder="Enter password" required>
                </div>
                
                <button type="submit" class="action-button" style="width: 100%; margin-top: 20px;">
                    <span>üöÄ</span>
                    <span>Start Kali Setup</span>
                </button>
            </form>
        </div>
    </div>

    <script>
        // Initialize WebSocket connection
        const socket = io();
        let terminalVisible = false;

        socket.on('connect', () => {
            console.log('üîå Connected to Kali Dragon server');
        });

        socket.on('command-output', (data) => {
            appendToTerminal(data.data, data.type);
        });

        socket.on('command-complete', (result) => {
            appendToTerminal(`\n‚îÄ‚îÄ‚îÄ Command completed (exit code: ${result.exitCode}) ‚îÄ‚îÄ‚îÄ\n`, 'info');
        });

        // Terminal functions
        function openTerminal() {
            const terminal = document.getElementById('terminal');
            terminal.style.display = terminalVisible ? 'none' : 'block';
            terminalVisible = !terminalVisible;
            
            if (terminalVisible) {
                document.getElementById('command-input').focus();
            }
        }

        function appendToTerminal(text, type = 'stdout') {
            const output = document.getElementById('terminal-output');
            const div = document.createElement('div');
            
            if (type === 'stderr') {
                div.style.color = '#ff6b6b';
            } else if (type === 'info') {
                div.style.color = '#4CAF50';
            }
            
            div.textContent = text;
            output.appendChild(div);
            output.scrollTop = output.scrollHeight;
        }

        function clearTerminal() {
            const output = document.getElementById('terminal-output');
            output.innerHTML = `
                <div style="color: #4CAF50;">üêâ Kali Dragon Terminal Ready</div>
                <div style="color: #2196F3;">Type commands below or use Quick Actions above</div>
                <div>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</div>
            `;
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                executeCommand();
            }
        }

        async function executeCommand() {
            const input = document.getElementById('command-input');
            const command = input.value.trim();
            
            if (!command) return;
            
            appendToTerminal(`$ ${command}`, 'info');
            input.value = '';
            
            try {
                const response = await fetch('/api/execute', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ command })
                });
                
                const result = await response.json();
                
                if (result.output) {
                    appendToTerminal(result.output, 'stdout');
                }
                
                if (result.error) {
                    appendToTerminal(result.error, 'stderr');
                }
                
            } catch (error) {
                appendToTerminal(`Error: ${error.message}`, 'stderr');
            }
        }

        // Modal functions
        function openKaliSetup() {
            document.getElementById('kali-setup-modal').style.display = 'block';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Action functions
        async function checkSystem() {
            appendToTerminal('üîç Checking system requirements...\n', 'info');
            
            if (!terminalVisible) openTerminal();
            
            try {
                const response = await fetch('/api/status');
                const result = await response.json();
                
                if (result.success) {
                    appendToTerminal('‚úÖ System check completed', 'info');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    appendToTerminal(`‚ùå System check failed: ${result.error}`, 'stderr');
                }
            } catch (error) {
                appendToTerminal(`‚ùå Error: ${error.message}`, 'stderr');
            }
        }

        function installDependencies() {
            if (!terminalVisible) openTerminal();
            
            const commands = [
                'echo "üêâ Installing Kali Dragon dependencies..."',
                'which python3 || echo "‚ö†Ô∏è Python3 not found - install from https://python.org"',
                'which docker || echo "‚ö†Ô∏è Docker not found - install OrbStack from https://orbstack.dev"',
                'which ssh || echo "‚ö†Ô∏è SSH not found"'
            ];
            
            commands.forEach((cmd, index) => {
                setTimeout(() => executeCommandDirect(cmd), index * 1000);
            });
        }

        function startMCPServer() {
            if (!terminalVisible) openTerminal();
            executeCommandDirect('echo "üöÄ MCP Server start functionality coming soon..."');
        }

        function openDocumentation() {
            window.open('https://github.com/your-repo/kali-dragon', '_blank');
        }

        function executeCommandDirect(command) {
            document.getElementById('command-input').value = command;
            executeCommand();
        }

        async function setupKali(event) {
            event.preventDefault();
            
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData);
            
            appendToTerminal('üêß Starting Kali Linux setup...\n', 'info');
            if (!terminalVisible) openTerminal();
            
            try {
                const response = await fetch('/api/setup/kali', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    appendToTerminal('‚úÖ Kali setup initiated successfully', 'info');
                } else {
                    appendToTerminal(`‚ùå Setup failed: ${result.error}`, 'stderr');
                }
                
                closeModal('kali-setup-modal');
                
            } catch (error) {
                appendToTerminal(`‚ùå Error: ${error.message}`, 'stderr');
            }
        }

        // Auto-refresh system status every 30 seconds
        setInterval(async () => {
            try {
                const response = await fetch('/api/status');
                const result = await response.json();
                
                if (result.success) {
                    // Update status indicators without full page reload
                    console.log('üìä System status updated');
                }
            } catch (error) {
                console.error('Failed to update status:', error);
            }
        }, 30000);
    </script>
</body>
</html>