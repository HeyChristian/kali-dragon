#!/usr/bin/env bash
set -euo pipefail

# Colors for better UX
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Global variables
KALI_VM_IP=""
KALI_USERNAME="kali"
KALI_PASSWORD=""
SSH_PORT="22"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOCKER_IMAGE_NAME="kali-mcp-server"

# Print header
print_header() {
    clear
    echo ""
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë                                                              ‚ïë${NC}"
    echo -e "${PURPLE}‚ïë          üêâ KALI DRAGON - THE ULTIMATE MCP TOOL üêâ          ‚ïë${NC}"
    echo -e "${PURPLE}‚ïë                                                              ‚ïë${NC}"
    echo -e "${PURPLE}‚ïë  $1${NC}"
    printf "${PURPLE}‚ïë%*s‚ïë${NC}\n" $((62 - ${#1})) ""
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

# Main menu selection
show_main_menu() {
    print_header "MAIN MENU - SELECT YOUR OPTION"
    
    echo -e "${GREEN}üêâ Welcome to Kali Dragon - The Ultimate MCP Tool!${NC}"
    echo ""
    echo -e "${CYAN}What would you like to do?${NC}"
    echo ""
    echo -e "${YELLOW}1)${NC} üöÄ ${GREEN}Full Setup Wizard${NC} - Complete automated installation"
    echo -e "${YELLOW}2)${NC} üîß ${BLUE}Repair/Fix${NC} - Fix existing configuration issues"
    echo -e "${YELLOW}3)${NC} üßπ ${RED}Clean/Reset${NC} - Remove all configurations and start fresh"
    echo -e "${YELLOW}4)${NC} üìö ${PURPLE}Setup Guide${NC} - Install UTM and Kali Linux (for beginners)"
    echo -e "${YELLOW}5)${NC} ‚ùì ${CYAN}Help${NC} - Show detailed help and documentation"
    echo -e "${YELLOW}6)${NC} üö™ ${NC}Exit${NC} - Quit Kali Dragon"
    echo ""
}

# Get menu choice
get_menu_choice() {
    local choice
    while true; do
        read -p "$(echo -e "${CYAN}Enter your choice [1-6]: ${NC}")" choice
        case $choice in
            1) return 1 ;;  # Full wizard
            2) return 2 ;;  # Repair
            3) return 3 ;;  # Clean
            4) return 4 ;;  # Setup Guide
            5) return 5 ;;  # Help
            6) return 6 ;;  # Exit
            *) echo -e "${RED}Invalid choice. Please enter 1, 2, 3, 4, 5, or 6.${NC}" ;;
        esac
    done
}

# Cleanup function
clean_all_configurations() {
    print_header "DRAGON CLEANUP - REMOVING ALL CONFIGURATIONS"
    
    echo -e "${RED}‚ö†Ô∏è  WARNING: This will completely remove all Kali Dragon configurations!${NC}"
    echo ""
    echo -e "${YELLOW}This will remove:${NC}"
    echo "  ‚Ä¢ SSH keys (~/.ssh/kali_mcp_key*)"
    echo "  ‚Ä¢ Docker images (kali-mcp-server)"
    echo "  ‚Ä¢ Claude Desktop MCP configurations"
    echo "  ‚Ä¢ Kali workspace (on remote VM)"
    echo ""
    
    if ! ask_yes_no "üóëÔ∏è  Are you ABSOLUTELY SURE you want to clean everything?" "n"; then
        print_success "Cleanup cancelled - nothing was removed"
        return 0
    fi
    
    print_step "Starting complete cleanup process"
    
    # Remove SSH keys
    show_progress "Removing SSH keys" 2
    rm -f "$HOME/.ssh/kali_mcp_key"* 2>/dev/null || true
    print_success "SSH keys removed"
    
    # Remove Docker images
    show_progress "Removing Docker images" 2
    docker rmi "$DOCKER_IMAGE_NAME" 2>/dev/null || true
    docker rmi $(docker images -q --filter "dangling=true") 2>/dev/null || true
    print_success "Docker images cleaned"
    
    # Backup and clean Claude config
    local claude_config="$HOME/Library/Application Support/Claude/claude_desktop_config.json"
    if [ -f "$claude_config" ]; then
        show_progress "Cleaning Claude Desktop configuration" 2
        
        local backup_config="${claude_config}.backup.cleanup.$(date +%Y%m%d_%H%M%S)"
        cp "$claude_config" "$backup_config" 2>/dev/null || true
        
        # Use Python to remove kali-related MCP servers
        python3 -c "
import json
import os

config_path = '$claude_config'
if os.path.exists(config_path):
    with open(config_path, 'r') as f:
        config = json.load(f)
    
    if 'mcpServers' in config:
        # Remove any kali-related servers
        servers_to_remove = []
        for server_name in config['mcpServers'].keys():
            if 'kali' in server_name.lower():
                servers_to_remove.append(server_name)
        
        for server_name in servers_to_remove:
            del config['mcpServers'][server_name]
            print(f'Removed MCP server: {server_name}')
    
    with open(config_path, 'w') as f:
        json.dump(config, f, indent=2)
" 2>/dev/null || true
        
        print_success "Claude configuration cleaned (backup created)"
    fi
    
    # Optionally clean remote Kali workspace if SSH is available
    if [ -f "$HOME/.ssh/kali_mcp_key" ] && [ -n "$KALI_VM_IP" ] && [ -n "$KALI_USERNAME" ]; then
        if ask_yes_no "üóëÔ∏è  Also remove Kali workspace from remote VM?"; then
            show_progress "Cleaning remote Kali workspace" 2
            ssh -i "$HOME/.ssh/kali_mcp_key" -p "$SSH_PORT" -o ConnectTimeout=10 -o BatchMode=yes "$KALI_USERNAME@$KALI_VM_IP" 'rm -rf ~/kali-mcp-workspace ~/mcp-server' 2>/dev/null || true
            print_success "Remote workspace cleaned"
        fi
    fi
    
    print_step "Cleanup completed successfully!"
    echo ""
    echo -e "${GREEN}‚úÖ All Kali Dragon configurations have been removed${NC}"
    echo -e "${CYAN}üí° You can now run a fresh setup using option 1${NC}"
    echo ""
}

# Repair function
repair_configuration() {
    print_header "DRAGON REPAIR - FIXING CONFIGURATION ISSUES"
    
    echo -e "${BLUE}üîß Kali Dragon will attempt to fix common issues${NC}"
    echo ""
    echo -e "${YELLOW}This will check and fix:${NC}"
    echo "  ‚Ä¢ SSH key connectivity"
    echo "  ‚Ä¢ Docker image availability"
    echo "  ‚Ä¢ Claude Desktop configuration"
    echo "  ‚Ä¢ MCP server functionality"
    echo ""
    
    if ! ask_yes_no "üîß Continue with repair process?"; then
        return 0
    fi
    
    # Check SSH connectivity
    print_step "Checking SSH connectivity"
    local key_path="$HOME/.ssh/kali_mcp_key"
    
    if [ ! -f "$key_path" ]; then
        print_warning "SSH key not found - you may need to run full setup"
        if ask_yes_no "üîë Would you like to run the full setup wizard instead?"; then
            return 1  # Signal to run full wizard
        fi
        return 0
    fi
    
    # Test connectivity with existing key
    echo "Testing SSH connection..."
    if [ -n "$KALI_VM_IP" ] && [ -n "$KALI_USERNAME" ]; then
        if ssh -i "$key_path" -p "$SSH_PORT" -o ConnectTimeout=10 -o BatchMode=yes -o StrictHostKeyChecking=no "$KALI_USERNAME@$KALI_VM_IP" "echo 'Connection OK'" >/dev/null 2>&1; then
            print_success "SSH connection working"
        else
            print_warning "SSH connection failed - may need VM credentials"
        fi
    else
        print_warning "VM credentials not set - you may need full setup"
    fi
    
    # Check Docker image
    print_step "Checking Docker image"
    if docker images | grep -q "$DOCKER_IMAGE_NAME"; then
        print_success "Docker image found"
    else
        print_warning "Docker image missing - rebuilding..."
        if build_docker_image; then
            print_success "Docker image rebuilt successfully"
        else
            print_error "Failed to rebuild Docker image"
        fi
    fi
    
    # Check Claude configuration
    print_step "Checking Claude Desktop configuration"
    local claude_config="$HOME/Library/Application Support/Claude/claude_desktop_config.json"
    
    if [ -f "$claude_config" ]; then
        if grep -q "kali" "$claude_config" 2>/dev/null; then
            print_success "Claude configuration found"
        else
            print_warning "Claude configuration missing Kali servers"
            if ask_yes_no "üîß Restore Claude configuration?"; then
                configure_claude_desktop "$KALI_VM_IP" "$KALI_USERNAME" "$SSH_PORT"
            fi
        fi
    else
        print_warning "Claude configuration file not found"
        if ask_yes_no "üîß Create Claude configuration?"; then
            configure_claude_desktop "$KALI_VM_IP" "$KALI_USERNAME" "$SSH_PORT"
        fi
    fi
    
    print_success "Repair process completed!"
}

# Show help
show_help() {
    print_header "KALI DRAGON - HELP & DOCUMENTATION"
    
    echo -e "${GREEN}üêâ Kali Dragon - The Ultimate Kali Linux MCP Tool${NC}"
    echo ""
    echo -e "${CYAN}DESCRIPTION:${NC}"
    echo "  Kali Dragon automates the complete setup of a Kali Linux MCP server"
    echo "  for Claude Desktop, enabling secure SSH-based access to your Kali VM."
    echo ""
    echo -e "${CYAN}FEATURES:${NC}"
    echo "  üîë Automated SSH key generation and deployment"
    echo "  üê≥ Optimized Docker MCP server with health checks"
    echo "  üìÅ Pre-configured workspace with tools and documentation"
    echo "  ‚öôÔ∏è  Automatic Claude Desktop configuration"
    echo "  üß™ End-to-end testing and validation"
    echo "  üîß Built-in repair and cleanup functions"
    echo ""
    echo -e "${CYAN}REQUIREMENTS:${NC}"
    echo "  ‚Ä¢ Running Kali Linux VM (accessible via network)"
    echo "  ‚Ä¢ Docker (Orbstack, Docker Desktop, or native)"
    echo "  ‚Ä¢ Claude Desktop application"
    echo "  ‚Ä¢ SSH client (built-in on macOS/Linux)"
    echo ""
    echo -e "${CYAN}USAGE:${NC}"
    echo "  ./kali-dragon.sh          - Interactive main menu"
    echo "  ./kali-dragon.sh --wizard - Direct to full setup wizard"
    echo "  ./kali-dragon.sh --clean  - Direct to cleanup mode"
    echo "  ./kali-dragon.sh --repair - Direct to repair mode"
    echo "  ./kali-dragon.sh --guide  - Show beginner's setup guide"
    echo "  ./kali-dragon.sh --help   - Show this help"
    echo ""
    echo -e "${CYAN}WHAT GETS CREATED:${NC}"
    echo "  ~/.ssh/kali_mcp_key                    - SSH private key"
    echo "  Docker image: kali-mcp-server          - MCP server container"
    echo "  ~/kali-mcp-workspace/ (on Kali)       - Workspace with tools"
    echo "  Claude Desktop MCP configuration       - Auto-configured server"
    echo ""
    echo -e "${CYAN}TROUBLESHOOTING:${NC}"
    echo "  üîß Use option 2 (Repair) for configuration issues"
    echo "  üßπ Use option 3 (Clean) to start completely fresh"
    echo "  üìã Check Claude Desktop logs for runtime issues"
    echo ""
    echo -e "${GREEN}Created by: Christian Vaztian${NC}"
    echo -e "${GREEN}Happy Ethical Hacking! üêâ‚ö°${NC}"
    echo ""
    
    echo -e "${CYAN}Press any key to return to main menu...${NC}"
    read -n 1 -s
}

# Setup Guide for beginners
show_setup_guide() {
    print_header "KALI DRAGON - BEGINNER'S SETUP GUIDE"
    
    echo -e "${GREEN}üêâ Welcome, Future Dragon Master!${NC}"
    echo ""
    echo -e "${CYAN}This guide will help you set up everything from scratch.${NC}"
    echo ""
    
    while true; do
        echo -e "${YELLOW}Setup Guide Options:${NC}"
        echo -e "${YELLOW}1)${NC} üì± ${BLUE}Install UTM (Virtual Machine)${NC}"
        echo -e "${YELLOW}2)${NC} üêß ${GREEN}Download and Setup Kali Linux${NC}"
        echo -e "${YELLOW}3)${NC} üîß ${PURPLE}Configure VM Network Settings${NC}"
        echo -e "${YELLOW}4)${NC} üê≥ ${CYAN}Install Docker (Orbstack)${NC}"
        echo -e "${YELLOW}5)${NC} ü§ñ ${YELLOW}Install Claude Desktop${NC}"
        echo -e "${YELLOW}6)${NC} üîô ${NC}Back to Main Menu${NC}"
        echo ""
        
        read -p "$(echo -e "${CYAN}Choose setup step [1-6]: ${NC}")" guide_choice
        
        case $guide_choice in
            1) show_utm_install_guide ;;
            2) show_kali_download_guide ;;
            3) show_network_config_guide ;;
            4) show_docker_install_guide ;;
            5) show_claude_install_guide ;;
            6) break ;;
            *) echo -e "${RED}Invalid choice. Please enter 1-6.${NC}" ;;
        esac
        
        echo ""
        echo -e "${CYAN}Press any key to continue...${NC}"
        read -n 1 -s
        clear
        print_header "KALI DRAGON - BEGINNER'S SETUP GUIDE"
    done
}

# UTM Installation Guide
show_utm_install_guide() {
    clear
    print_header "UTM INSTALLATION GUIDE"
    
    echo -e "${GREEN}üì± UTM - The Best VM for Mac${NC}"
    echo ""
    echo -e "${CYAN}UTM is a powerful, user-friendly virtual machine app for Mac.${NC}"
    echo ""
    echo -e "${YELLOW}Installation Options:${NC}"
    echo ""
    echo -e "${BLUE}‚úÖ Option 1: Mac App Store (Recommended)${NC}"
    echo "  1. Open Mac App Store"
    echo "  2. Search for 'UTM Virtual Machines'"
    echo "  3. Click 'Get' or 'Install'"
    echo "  4. Wait for download to complete"
    echo ""
    echo -e "${BLUE}‚úÖ Option 2: Direct Download (Free)${NC}"
    echo "  1. Visit: https://mac.getutm.app/"
    echo "  2. Click 'Download' for the free version"
    echo "  3. Open the downloaded .dmg file"
    echo "  4. Drag UTM to Applications folder"
    echo ""
    echo -e "${GREEN}‚ú® Why UTM?${NC}"
    echo "  ‚Ä¢ Native Apple Silicon support"
    echo "  ‚Ä¢ User-friendly interface"
    echo "  ‚Ä¢ Excellent performance"
    echo "  ‚Ä¢ Perfect for Kali Linux"
    echo ""
    
    if ask_yes_no "üöÄ Open UTM website now?"; then
        open "https://mac.getutm.app/"
        print_success "UTM website opened in your browser"
    fi
}

# Kali Linux Download Guide  
show_kali_download_guide() {
    clear
    print_header "KALI LINUX SETUP GUIDE"
    
    echo -e "${GREEN}üêß Kali Linux - The Ultimate Pentesting OS${NC}"
    echo ""
    echo -e "${CYAN}We'll set up Kali Linux in your UTM virtual machine.${NC}"
    echo ""
    echo -e "${YELLOW}Step-by-Step Process:${NC}"
    echo ""
    echo -e "${BLUE}1. Download Kali Linux ISO${NC}"
    echo "   ‚Ä¢ Visit: https://www.kali.org/get-kali/#kali-installer-images"
    echo "   ‚Ä¢ Choose: 'Installer' tab"
    echo "   ‚Ä¢ Download: 'Kali Linux 64-Bit (Installer)'"
    echo "   ‚Ä¢ Size: ~3.6 GB (be patient!)"
    echo ""
    echo -e "${BLUE}2. Create VM in UTM${NC}"
    echo "   ‚Ä¢ Open UTM"
    echo "   ‚Ä¢ Click '+' to create new VM"
    echo "   ‚Ä¢ Choose 'Virtualize'"
    echo "   ‚Ä¢ Select 'Linux'"
    echo "   ‚Ä¢ Browse to your downloaded Kali ISO"
    echo ""
    echo -e "${BLUE}3. Configure VM Settings${NC}"
    echo "   ‚Ä¢ Memory: 4GB (4096 MB) minimum"
    echo "   ‚Ä¢ Storage: 64GB minimum"
    echo "   ‚Ä¢ CPU Cores: 2-4 cores"
    echo ""
    echo -e "${BLUE}4. Install Kali Linux${NC}"
    echo "   ‚Ä¢ Start the VM"
    echo "   ‚Ä¢ Choose 'Graphical install'"
    echo "   ‚Ä¢ Follow the installer (choose defaults)"
    echo "   ‚Ä¢ Username: kali"
    echo "   ‚Ä¢ Password: kali (or your choice)"
    echo ""
    echo -e "${GREEN}üéØ Pro Tips:${NC}"
    echo "  ‚Ä¢ Enable 'Shared Network' in UTM settings"
    echo "  ‚Ä¢ Note the VM's IP address after installation"
    echo "  ‚Ä¢ Enable SSH: sudo systemctl enable ssh"
    echo ""
    
    if ask_yes_no "üöÄ Open Kali Linux download page now?"; then
        open "https://www.kali.org/get-kali/#kali-installer-images"
        print_success "Kali Linux download page opened in your browser"
    fi
}

# Network Configuration Guide
show_network_config_guide() {
    clear
    print_header "VM NETWORK CONFIGURATION GUIDE"
    
    echo -e "${GREEN}üîß Network Setup for Kali Dragon${NC}"
    echo ""
    echo -e "${CYAN}Proper network configuration is crucial for Dragon magic!${NC}"
    echo ""
    echo -e "${YELLOW}UTM Network Configuration:${NC}"
    echo ""
    echo -e "${BLUE}1. In UTM, select your Kali VM${NC}"
    echo "   ‚Ä¢ Click the 'Edit' button (gear icon)"
    echo "   ‚Ä¢ Go to 'Network' section"
    echo ""
    echo -e "${BLUE}2. Set Network Mode${NC}"
    echo "   ‚Ä¢ Choose: 'Shared Network'"
    echo "   ‚Ä¢ This allows Mac ‚Üí VM communication"
    echo ""
    echo -e "${BLUE}3. Find Your VM's IP Address${NC}"
    echo "   After booting Kali, run in terminal:"
    echo "   üíª ${GREEN}ip addr show${NC}"
    echo "   Look for: 192.168.64.x (UTM default range)"
    echo ""
    echo -e "${BLUE}4. Enable SSH in Kali${NC}"
    echo "   Run these commands in Kali terminal:"
    echo "   üíª ${GREEN}sudo systemctl enable ssh${NC}"
    echo "   üíª ${GREEN}sudo systemctl start ssh${NC}"
    echo ""
    echo -e "${BLUE}5. Test Connection from Mac${NC}"
    echo "   üíª ${GREEN}ping 192.168.64.x${NC} (replace x with your IP)"
    echo ""
    echo -e "${RED}‚ö†Ô∏è Troubleshooting:${NC}"
    echo "  ‚Ä¢ VM not getting IP? Restart the VM"
    echo "  ‚Ä¢ Can't ping? Check UTM network settings"
    echo "  ‚Ä¢ SSH refused? Verify SSH service is running"
    echo ""
    echo -e "${GREEN}üéØ Once this works, Kali Dragon can connect!${NC}"
}

# Docker Installation Guide
show_docker_install_guide() {
    clear
    print_header "DOCKER INSTALLATION GUIDE"
    
    echo -e "${GREEN}üê≥ Docker - Container Magic for Dragon${NC}"
    echo ""
    echo -e "${CYAN}Kali Dragon uses Docker to create optimized MCP servers.${NC}"
    echo ""
    echo -e "${YELLOW}Recommended: OrbStack (Best for Mac)${NC}"
    echo ""
    echo -e "${BLUE}‚úÖ OrbStack Installation:${NC}"
    echo "  1. Visit: https://orbstack.dev/"
    echo "  2. Click 'Download for Mac'"
    echo "  3. Open downloaded .dmg file"
    echo "  4. Drag OrbStack to Applications"
    echo "  5. Launch OrbStack (follow setup)"
    echo ""
    echo -e "${GREEN}‚ú® Why OrbStack?${NC}"
    echo "  ‚Ä¢ 2x faster than Docker Desktop"
    echo "  ‚Ä¢ Uses less memory and battery"
    echo "  ‚Ä¢ Native Mac integration"
    echo "  ‚Ä¢ Perfect for Dragon containers"
    echo ""
    echo -e "${YELLOW}Alternative: Docker Desktop${NC}"
    echo "  1. Visit: https://www.docker.com/products/docker-desktop/"
    echo "  2. Download Docker Desktop for Mac"
    echo "  3. Install and launch"
    echo ""
    echo -e "${BLUE}Verify Installation:${NC}"
    echo "  Open Terminal and run:"
    echo "  üíª ${GREEN}docker --version${NC}"
    echo "  Should show Docker version info"
    echo ""
    
    if ask_yes_no "üöÄ Open OrbStack website now?"; then
        open "https://orbstack.dev/"
        print_success "OrbStack website opened in your browser"
    fi
}

# Claude Desktop Installation Guide
show_claude_install_guide() {
    clear
    print_header "CLAUDE DESKTOP INSTALLATION GUIDE"
    
    echo -e "${GREEN}ü§ñ Claude Desktop - Your AI Pentesting Assistant${NC}"
    echo ""
    echo -e "${CYAN}Claude Desktop is where the Dragon magic happens!${NC}"
    echo ""
    echo -e "${YELLOW}Installation Steps:${NC}"
    echo ""
    echo -e "${BLUE}1. Download Claude Desktop${NC}"
    echo "   ‚Ä¢ Visit: https://claude.ai/desktop"
    echo "   ‚Ä¢ Click 'Download for Mac'"
    echo "   ‚Ä¢ Wait for download to complete"
    echo ""
    echo -e "${BLUE}2. Install Claude Desktop${NC}"
    echo "   ‚Ä¢ Open the downloaded .dmg file"
    echo "   ‚Ä¢ Drag Claude to Applications folder"
    echo "   ‚Ä¢ Launch Claude Desktop"
    echo ""
    echo -e "${BLUE}3. Sign In${NC}"
    echo "   ‚Ä¢ Use your Anthropic account"
    echo "   ‚Ä¢ Or create a new account"
    echo ""
    echo -e "${GREEN}üéØ What Claude Desktop Does:${NC}"
    echo "  ‚Ä¢ Provides AI assistance for pentesting"
    echo "  ‚Ä¢ Connects to your Kali VM via Dragon"
    echo "  ‚Ä¢ Executes commands securely"
    echo "  ‚Ä¢ Helps with script creation"
    echo "  ‚Ä¢ Generates security checklists"
    echo ""
    echo -e "${PURPLE}üêâ After Kali Dragon Setup:${NC}"
    echo "  You'll see 'kali-linux-mcp' server in Claude Desktop!"
    echo ""
    
    if ask_yes_no "üöÄ Open Claude Desktop website now?"; then
        open "https://claude.ai/desktop"
        print_success "Claude Desktop website opened in your browser"
    fi

# Generate SSH key and setup authentication
setup_ssh_authentication() {
    local ip="$1"
    local user="$2"
    local password="$3"
    local port="$4"
    
    print_step "Generating SSH key and setting up authentication"
    
    # Remove old key if exists
    local key_path="$HOME/.ssh/kali_mcp_key"
    if [ -f "$key_path" ]; then
        echo "Removing old SSH key..."
        rm -f "$key_path"*
    fi
    
    # Generate new SSH key
    show_progress "Generating new SSH key" 2
    ssh-keygen -t ed25519 -f "$key_path" -N "" -C "kali-mcp-$(date +%Y%m%d_%H%M%S)" >/dev/null 2>&1
    print_success "SSH key generated"
    
    # Install sshpass if needed for automation
    if ! command -v sshpass >/dev/null 2>&1; then
        echo "Installing sshpass for automated SSH key copying..."
        if command -v brew >/dev/null 2>&1; then
            brew install sshpass >/dev/null 2>&1 || true
        fi
    fi
    
    # Copy key to VM
    show_progress "Installing SSH key to Kali VM" 3
    
    if command -v sshpass >/dev/null 2>&1; then
        if sshpass -p "$password" ssh-copy-id -i "$key_path" -o StrictHostKeyChecking=no -p "$port" "$user@$ip" >/dev/null 2>&1; then
            print_success "SSH key installed successfully"
        else
            print_error "Failed to install SSH key"
            return 1
        fi
    else
        # Fallback to expect if sshpass not available
        expect -c "
            set timeout 30
            spawn ssh-copy-id -i $key_path -o StrictHostKeyChecking=no -p $port $user@$ip
            expect {
                \"password:\" {
                    send \"$password\r\"
                    expect eof
                }
                \"(yes/no)\" {
                    send \"yes\r\"
                    expect \"password:\"
                    send \"$password\r\"
                    expect eof
                }
            }
        " >/dev/null 2>&1
        
        if [ $? -eq 0 ]; then
            print_success "SSH key installed successfully"
        else
            print_error "Failed to install SSH key"
            return 1
        fi
    fi
    
    # Test SSH key
    if ssh -i "$key_path" -p "$port" -o ConnectTimeout=5 -o BatchMode=yes -o StrictHostKeyChecking=no "$user@$ip" "echo 'SSH works'" >/dev/null 2>&1; then
        print_success "SSH key authentication working perfectly"
        return 0
    else
        print_error "SSH key authentication failed"
        return 1
    fi
}

# Setup Kali workspace with tools and samples
setup_kali_workspace() {
    local ip="$1"
    local user="$2"
    local port="$3"
    local key_path="$HOME/.ssh/kali_mcp_key"
    
    print_step "Setting up Kali workspace with sample files and tools"
    
    show_progress "Creating workspace structure" 2
    
    # Create comprehensive workspace setup
    local setup_script='
# Create main workspace directory
mkdir -p ~/kali-mcp-workspace/{scripts,notes,tools,projects}

# Create main README
cat > ~/kali-mcp-workspace/README.md << "EOF"
# üêâ Kali Linux MCP Workspace

Welcome to your Kali Linux workspace accessible via Claude Desktop!

## üìÅ Directory Structure:
- **scripts/**: Useful scripts and automation tools
- **notes/**: Documentation and notes about tools and techniques  
- **tools/**: Custom tools and configurations
- **projects/**: Active penetration testing projects

## üõ†Ô∏è Available Kali Tools:
This workspace provides access to the full Kali Linux arsenal through Claude Desktop.

## üöÄ Quick Start:
Ask Claude:
- "List files in the Kali workspace"
- "Show me the available tools"
- "Read the penetration testing guide"
- "What scripts are available?"

## üîê Security Notes:
- This workspace is isolated and secure
- All file access is controlled and monitored
- Perfect for learning and ethical hacking practice

Happy Ethical Hacking! üêâ
EOF

# Create tools documentation
cat > ~/kali-mcp-workspace/notes/kali-tools-reference.md << "EOF"
# üõ†Ô∏è Kali Linux Tools Reference

## Network Reconnaissance:
- **nmap**: Network discovery and security auditing
- **masscan**: Fast port scanner
- **rustscan**: Modern port scanner
- **gobuster**: Directory/file brute-forcer
- **ffuf**: Fast web fuzzer

## Web Application Security:
- **burpsuite**: Web application security testing
- **nikto**: Web vulnerability scanner
- **sqlmap**: SQL injection detection and exploitation
- **owasp-zap**: Web application security scanner
- **wfuzz**: Web application fuzzer

## Wireless Security:
- **aircrack-ng**: WiFi security assessment
- **reaver**: WPS attack tool
- **kismet**: Wireless network detector

## Exploitation:
- **metasploit**: Exploitation framework
- **searchsploit**: Exploit database search
- **msfvenom**: Payload generator

## Forensics:
- **autopsy**: Digital forensics platform
- **volatility**: Memory forensics
- **binwalk**: Firmware analysis

## Password Attacks:
- **john**: Password cracker
- **hashcat**: Advanced password recovery
- **hydra**: Network logon cracker

## Social Engineering:
- **setoolkit**: Social engineering toolkit
- **maltego**: Intelligence gathering

Use these tools responsibly and only on systems you own or have permission to test!
EOF

# Create sample penetration testing script
cat > ~/kali-mcp-workspace/scripts/recon-basic.sh << "EOF"
#!/bin/bash
# Basic Reconnaissance Script for Ethical Hacking

echo "üîç Basic Reconnaissance Script"
echo "=============================="

if [ $# -eq 0 ]; then
    echo "Usage: $0 <target-domain-or-ip>"
    echo "Example: $0 example.com"
    exit 1
fi

TARGET=$1
echo "üéØ Target: $TARGET"
echo ""

echo "üì° Basic Network Information:"
echo "----------------------------"
# Basic host info
nslookup $TARGET 2>/dev/null || echo "DNS lookup failed"
echo ""

echo "üîç Basic Port Scan (Top 100 ports):"
echo "-----------------------------------"
# Quick port scan - only if nmap is available and target is appropriate
if command -v nmap &> /dev/null; then
    echo "Running nmap scan..."
    # Note: Only run on targets you own or have permission to test
    echo "nmap -F $TARGET # (Command ready - run manually for actual scan)"
else
    echo "nmap not found - install with: sudo apt install nmap"
fi

echo ""
echo "‚úÖ Reconnaissance complete!"
echo "‚ö†Ô∏è  Remember: Only scan systems you own or have explicit permission to test!"
EOF

chmod +x ~/kali-mcp-workspace/scripts/recon-basic.sh

# Create a system info script
cat > ~/kali-mcp-workspace/scripts/system-info.sh << "EOF"
#!/bin/bash
# System Information Script

echo "üêâ Kali Linux System Information"
echo "================================"
echo ""

echo "üìã System Details:"
echo "OS: $(lsb_release -d | cut -f2-)"
echo "Kernel: $(uname -r)"
echo "Architecture: $(uname -m)"
echo "Hostname: $(hostname)"
echo "Uptime: $(uptime -p)"
echo ""

echo "üíæ Memory Usage:"
free -h
echo ""

echo "üíΩ Disk Usage:"
df -h / | tail -1
echo ""

echo "üõ†Ô∏è Some Available Security Tools:"
echo "Network: nmap, masscan, gobuster"
echo "Web: burpsuite, nikto, sqlmap"
echo "Wireless: aircrack-ng, kismet"
echo "Exploitation: metasploit, searchsploit"
echo ""

echo "‚úÖ System check complete!"
EOF

chmod +x ~/kali-mcp-workspace/scripts/system-info.sh

# Create project template
cat > ~/kali-mcp-workspace/projects/example-project.md << "EOF"
# Example Penetration Testing Project

## üìã Project Overview:
- **Target**: [Target Name/IP]
- **Scope**: [Define testing scope]
- **Date**: [Start Date]
- **Objective**: [Testing objectives]

## üîç Reconnaissance Phase:
### Information Gathering:
- [ ] Domain enumeration
- [ ] Subdomain discovery
- [ ] Port scanning
- [ ] Service identification

### Findings:
- [Document findings here]

## üéØ Vulnerability Assessment:
### Web Application Testing:
- [ ] Directory/file brute forcing
- [ ] SQL injection testing
- [ ] XSS testing
- [ ] Authentication bypass

### Network Testing:
- [ ] Service vulnerability scanning
- [ ] Version detection
- [ ] Protocol testing

### Findings:
- [Document vulnerabilities]

## üöÄ Exploitation:
### Successful Exploits:
- [Document successful exploits]

### Proof of Concept:
- [Include screenshots/evidence]

## üìä Reporting:
### Risk Assessment:
- Critical: [Number]
- High: [Number]  
- Medium: [Number]
- Low: [Number]

### Recommendations:
- [Security recommendations]

## üìù Notes:
- [Additional notes and observations]

---
‚ö†Ô∏è **IMPORTANT**: This template is for authorized penetration testing only!
Only test systems you own or have explicit written permission to test.
EOF

# Create notes about ethical hacking
cat > ~/kali-mcp-workspace/notes/ethical-hacking-guidelines.md << "EOF"
# Ethical Hacking Guidelines

## Legal and Ethical Considerations:

### ALWAYS Required:
1. Written Permission: Never test without explicit written authorization
2. Scope Definition: Clearly define what can and cannot be tested
3. Data Protection: Respect confidentiality and data protection laws
4. No Damage: Never cause damage or disruption to systems

### Professional Standards:
- Follow responsible disclosure practices
- Document everything thoroughly
- Provide constructive recommendations
- Maintain client confidentiality

## Learning Resources:
- Practice Labs: Use dedicated vulnerable applications (DVWA, WebGoat, VulnHub)
- Certification Paths: CEH, OSCP, CISSP
- Bug Bounty Programs: HackerOne, Bugcrowd (with proper authorization)

## What NOT to Do:
- Never test systems you do not own
- Do not access unauthorized data
- Do not disrupt business operations
- Do not share vulnerabilities publicly without permission

## Best Practices:
1. Always work within defined scope
2. Document methodology and findings
3. Validate findings before reporting
4. Provide clear remediation steps
5. Follow up on remediation efforts

Remember: With great power comes great responsibility!
EOF

echo "Kali MCP workspace setup complete with comprehensive tools and documentation!"
echo "Created directories: scripts, notes, tools, projects"
echo "Added sample files, tool references, and ethical hacking guidelines."
'

    if ssh -i "$key_path" -p "$port" "$user@$ip" "$setup_script" >/dev/null 2>&1; then
        print_success "Kali workspace created with comprehensive tools and documentation"
        return 0
    else
        print_error "Failed to setup Kali workspace"
        return 1
    fi
}

# Build local Docker MCP server image
build_docker_image() {
    print_step "Building MCP Docker image locally (using your Orbstack)"
    
    show_progress "Creating Docker build context" 2
    
    local temp_dir=$(mktemp -d)
    
    # Create optimized Dockerfile
    cat > "$temp_dir/Dockerfile" << 'EOF'
FROM node:20-alpine

# Install SSH client and other tools
RUN apk add --no-cache openssh-client curl jq

# Create app directory
WORKDIR /app

# Copy package files first for better caching
COPY package.json ./

# Install dependencies (none for now, but good practice)
RUN npm install --only=production

# Copy server code
COPY server.js ./

# Create non-root user for security
RUN adduser -D -s /bin/sh mcpuser
USER mcpuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD echo '{"jsonrpc":"2.0","id":"health","method":"ping"}' | node server.js | grep -q pong || exit 1

# Run the MCP server
CMD ["node", "server.js"]
EOF

    # Create minimal package.json
    cat > "$temp_dir/package.json" << 'EOF'
{
  "name": "kali-mcp-server",
  "version": "2.0.0",
  "description": "Kali Linux MCP Server via SSH - Optimized Edition",
  "main": "server.js",
  "author": "Automated Wizard",
  "license": "MIT",
  "engines": {
    "node": ">=18.0.0"
  }
}
EOF

    # Create optimized MCP server
    cat > "$temp_dir/server.js" << 'EOF'
#!/usr/bin/env node
/**
 * Kali Linux MCP Server - Optimized SSH Edition
 * Connects to Kali VM via SSH and provides secure MCP interface
 */
const { spawn } = require('child_process');
const path = require('path');

// Configuration from environment variables
const KALI_IP = process.env.KALI_IP || '192.168.64.2';
const KALI_USER = process.env.KALI_USER || 'kali';
const KALI_PORT = process.env.KALI_PORT || '22';
const SSH_KEY_PATH = process.env.SSH_KEY_PATH || '/ssh-key/kali_mcp_key';
const WORKSPACE_DIR = '/home/kali/kali-mcp-workspace';

class KaliMCPServer {
  constructor() {
    this.initialized = false;
    this.setupStreams();
  }

  setupStreams() {
    process.stdin.setEncoding('utf8');
    process.stdout.setEncoding('utf8');
    
    // Handle uncaught exceptions gracefully
    process.on('uncaughtException', (error) => {
      this.sendError(null, -32603, `Uncaught exception: ${error.message}`);
    });
    
    process.on('unhandledRejection', (reason) => {
      this.sendError(null, -32603, `Unhandled rejection: ${reason}`);
    });
  }

  // Execute command on Kali VM via SSH
  async executeSSHCommand(command) {
    return new Promise((resolve, reject) => {
      const ssh = spawn('ssh', [
        '-i', SSH_KEY_PATH,
        '-p', KALI_PORT,
        '-o', 'ConnectTimeout=15',
        '-o', 'BatchMode=yes',
        '-o', 'StrictHostKeyChecking=no',
        '-o', 'UserKnownHostsFile=/dev/null',
        `${KALI_USER}@${KALI_IP}`,
        command
      ]);

      let stdout = '';
      let stderr = '';

      ssh.stdout.on('data', (data) => {
        stdout += data.toString();
      });

      ssh.stderr.on('data', (data) => {
        stderr += data.toString();
      });

      ssh.on('close', (code) => {
        if (code === 0) {
          resolve(stdout.trim());
        } else {
          reject(new Error(stderr.trim() || `Command failed with code ${code}`));
        }
      });

      ssh.on('error', (error) => {
        reject(new Error(`SSH Error: ${error.message}`));
      });

      // Set timeout for long-running commands
      setTimeout(() => {
        ssh.kill('SIGTERM');
        reject(new Error('Command timeout'));
      }, 30000); // 30 second timeout
    });
  }

  // Send JSON-RPC 2.0 response
  sendResponse(id, result = null, error = null) {
    const response = { jsonrpc: '2.0', id };
    
    if (error) {
      response.error = typeof error === 'object' ? error : {
        code: -32000,
        message: String(error)
      };
    } else {
      response.result = result || {};
    }
    
    process.stdout.write(JSON.stringify(response) + '\n');
  }

  sendError(id, code, message) {
    this.sendResponse(id, null, { code, message });
  }

  // Handle initialize method
  handleInitialize(id, params) {
    this.initialized = true;
    this.sendResponse(id, {
      protocolVersion: '2024-11-05',
      capabilities: {
        resources: { subscribe: false, listChanged: false },
        tools: {},
        prompts: {}
      },
      serverInfo: {
        name: 'kali-mcp-ssh-server',
        version: '2.0.0',
        description: `Kali Linux MCP Server (SSH to ${KALI_IP})`
      }
    });
  }

  // Handle resources/list method
  handleResourcesList(id) {
    const resources = [{
      uri: `file://${WORKSPACE_DIR}`,
      name: 'üêâ Kali MCP Workspace',
      description: `Kali Linux workspace via SSH (${KALI_IP})`,
      mimeType: 'inode/directory'
    }];
    
    this.sendResponse(id, { resources });
  }

  // Handle resources/read method
  async handleResourcesRead(id, params) {
    try {
      if (!params?.uri) {
        throw new Error('Missing URI parameter');
      }
      
      const uri = params.uri;
      if (!uri.startsWith('file://')) {
        throw new Error('Only file:// URIs are supported');
      }
      
      let filePath = uri.replace('file://', '');
      
      // Normalize path to workspace
      if (!filePath.startsWith(WORKSPACE_DIR)) {
        if (path.basename(filePath) === path.basename(WORKSPACE_DIR)) {
          filePath = WORKSPACE_DIR;
        } else {
          filePath = path.join(WORKSPACE_DIR, path.basename(filePath));
        }
      }

      // Check if path exists and get type
      const statCmd = `stat -c '%F:%s:%Y' "${filePath}" 2>/dev/null || echo "not_found"`;
      const statResult = await this.executeSSHCommand(statCmd);
      
      if (statResult === 'not_found') {
        throw new Error('File or directory not found');
      }

      const [fileType, size, mtime] = statResult.split(':');
      
      if (fileType.includes('directory')) {
        // List directory contents with detailed info
        const listCmd = `cd "${filePath}" && ls -la --time-style=+%s 2>/dev/null | tail -n +2`;
        const listing = await this.executeSSHCommand(listCmd);
        
        const files = listing.split('\n')
          .filter(line => line.trim())
          .map(line => {
            const parts = line.trim().split(/\s+/);
            if (parts.length < 9) return null;
            
            const [perms, , , , size, timestamp, , , ...nameParts] = parts;
            const name = nameParts.join(' ');
            
            if (name === '.' || name === '..') return null;
            
            return {
              name,
              type: perms.startsWith('d') ? 'directory' : 'file',
              size: perms.startsWith('d') ? null : parseInt(size),
              modified: new Date(parseInt(timestamp) * 1000).toISOString(),
              permissions: perms,
              readable: true
            };
          })
          .filter(Boolean);
        
        this.sendResponse(id, {
          contents: [{
            uri,
            mimeType: 'application/json',
            text: JSON.stringify(files, null, 2)
          }]
        });
        
      } else {
        // Read file content
        const maxSize = 5 * 1024 * 1024; // 5MB limit
        if (parseInt(size) > maxSize) {
          throw new Error(`File too large: ${size} bytes (max: ${maxSize})`);
        }
        
        const content = await this.executeSSHCommand(`cat "${filePath}"`);
        
        // Determine MIME type based on extension
        const ext = path.extname(filePath).toLowerCase();
        const mimeTypes = {
          '.md': 'text/markdown',
          '.txt': 'text/plain',
          '.sh': 'application/x-shellscript',
          '.json': 'application/json',
          '.py': 'text/x-python',
          '.js': 'text/javascript',
          '.html': 'text/html',
          '.xml': 'text/xml',
          '.log': 'text/plain'
        };
        
        this.sendResponse(id, {
          contents: [{
            uri,
            mimeType: mimeTypes[ext] || 'text/plain',
            text: content
          }]
        });
      }
      
    } catch (error) {
      this.sendError(id, -32603, `Resource read failed: ${error.message}`);
    }
  }

  // Handle ping method for testing
  async handlePing(id) {
    try {
      const uptime = await this.executeSSHCommand('uptime');
      const whoami = await this.executeSSHCommand('whoami');
      const hostname = await this.executeSSHCommand('hostname');
      
      this.sendResponse(id, {
        message: 'pong',
        server: 'kali-mcp-ssh-server',
        kali_info: {
          ip: KALI_IP,
          user: whoami,
          hostname: hostname,
          uptime: uptime,
          workspace: WORKSPACE_DIR
        },
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      this.sendResponse(id, {
        message: 'pong',
        server: 'kali-mcp-ssh-server',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  // Main message handler
  async handleMessage(message) {
    try {
      if (!message || typeof message !== 'object') {
        return this.sendError(null, -32600, 'Invalid Request');
      }

      const { jsonrpc, id, method, params } = message;
      
      if (jsonrpc !== '2.0') {
        return this.sendError(id, -32600, 'Invalid JSON-RPC version');
      }
      
      if (!method || typeof method !== 'string') {
        return this.sendError(id, -32600, 'Invalid method');
      }
      
      switch (method) {
        case 'initialize':
          this.handleInitialize(id, params);
          break;
        case 'resources/list':
          this.handleResourcesList(id, params);
          break;
        case 'resources/read':
          await this.handleResourcesRead(id, params);
          break;
        case 'ping':
          await this.handlePing(id);
          break;
        default:
          this.sendError(id, -32601, `Method not found: ${method}`);
      }
      
    } catch (error) {
      this.sendError(message?.id, -32603, `Internal error: ${error.message}`);
    }
  }
}

// Initialize server
const server = new KaliMCPServer();

// Process stdin
let buffer = '';
process.stdin.on('data', (chunk) => {
  buffer += chunk.toString();
  let newlineIndex;
  
  while ((newlineIndex = buffer.indexOf('\n')) !== -1) {
    const line = buffer.slice(0, newlineIndex).trim();
    buffer = buffer.slice(newlineIndex + 1);
    
    if (line) {
      try {
        const message = JSON.parse(line);
        server.handleMessage(message);
      } catch (error) {
        server.sendError(null, -32700, `Parse error: ${error.message}`);
      }
    }
  }
});

// Graceful shutdown
process.on('SIGINT', () => process.exit(0));
process.on('SIGTERM', () => process.exit(0));
EOF

    show_progress "Building Docker image" 3
    
    if docker build -t "$DOCKER_IMAGE_NAME" "$temp_dir" >/dev/null 2>&1; then
        print_success "Docker image built successfully"
        rm -rf "$temp_dir"
        return 0
    else
        print_error "Docker build failed"
        rm -rf "$temp_dir"
        return 1
    fi
}

# Configure Claude Desktop with the new MCP server
configure_claude_desktop() {
    local ip="$1"
    local user="$2"
    local port="$3"
    
    print_step "Configuring Claude Desktop with Kali MCP server"
    
    local claude_config="$HOME/Library/Application Support/Claude/claude_desktop_config.json"
    local backup_config="${claude_config}.backup.final.$(date +%Y%m%d_%H%M%S)"
    
    # Create directory if it doesn't exist
    mkdir -p "$(dirname "$claude_config")"
    
    # Backup existing configuration
    if [ -f "$claude_config" ]; then
        cp "$claude_config" "$backup_config"
        print_success "Configuration backed up to: $(basename "$backup_config")"
    fi
    
    show_progress "Updating Claude Desktop configuration" 2
    
    # Update configuration using Python
    python3 -c "
import json
import os

config_path = '$claude_config'
ip = '$ip'
user = '$user'
port = '$port'
image_name = '$DOCKER_IMAGE_NAME'
key_path = '$HOME/.ssh/kali_mcp_key'

# Read existing configuration
try:
    if os.path.exists(config_path):
        with open(config_path, 'r') as f:
            config = json.load(f)
    else:
        config = {}
except (json.JSONDecodeError, Exception):
    config = {}

# Ensure mcpServers section exists
if 'mcpServers' not in config:
    config['mcpServers'] = {}

# Add the new Kali MCP server configuration
config['mcpServers']['kali-linux-mcp'] = {
    'command': 'docker',
    'args': [
        'run', '--rm', '-i',
        '-v', f'{key_path}:/ssh-key/kali_mcp_key:ro',
        '-e', f'KALI_IP={ip}',
        '-e', f'KALI_USER={user}',
        '-e', f'KALI_PORT={port}',
        image_name
    ],
    'env': {}
}

# Write updated configuration
with open(config_path, 'w') as f:
    json.dump(config, f, indent=2)

# Count total servers
server_count = len(config.get('mcpServers', {}))
print(f'‚úÖ Configuration updated successfully!')
print(f'Total MCP servers configured: {server_count}')

for server_name in config['mcpServers'].keys():
    print(f'  ‚Ä¢ {server_name}')
" 2>/dev/null

    if [ $? -eq 0 ]; then
        print_success "Claude Desktop configured successfully"
        return 0
    else
        print_error "Failed to configure Claude Desktop"
        return 1
    fi
}

# Test the complete setup
test_complete_setup() {
    local ip="$1"
    local user="$2"
    local port="$3"
    
    print_step "Testing complete MCP setup"
    
    show_progress "Running end-to-end test" 3
    
    # Test Docker container with SSH connection
    local test_message='{"jsonrpc":"2.0","id":"test","method":"ping"}'
    
    local response
    response=$(echo "$test_message" | timeout 30 docker run --rm -i \
        -v "$HOME/.ssh/kali_mcp_key:/ssh-key/kali_mcp_key:ro" \
        -e "KALI_IP=$ip" \
        -e "KALI_USER=$user" \
        -e "KALI_PORT=$port" \
        "$DOCKER_IMAGE_NAME" 2>/dev/null)
    
    if echo "$response" | grep -q '"message":"pong"'; then
        print_success "Complete setup test PASSED!"
        
        # Show some response details if jq is available
        if command -v jq >/dev/null 2>&1; then
            local kali_info
            kali_info=$(echo "$response" | jq -r '.result.kali_info.hostname // "N/A"' 2>/dev/null)
            if [ "$kali_info" != "N/A" ] && [ "$kali_info" != "null" ]; then
                echo "  Connected to Kali host: $kali_info"
            fi
        fi
        return 0
    else
        print_warning "Setup test failed, but configuration is complete"
        echo "  You can still try using the MCP server in Claude Desktop"
        return 1
    fi
}

# Open Claude Desktop automatically
open_claude_desktop() {
    print_step "Opening Claude Desktop automatically"
    
    # Check if Claude Desktop is installed
    if [ -d "/Applications/Claude.app" ]; then
        echo "Starting Claude Desktop..."
        open -a "Claude" >/dev/null 2>&1
        print_success "Claude Desktop opened successfully!"
        echo ""
        echo -e "${YELLOW}üéØ Your Kali MCP server 'kali-linux-mcp' is now ready!${NC}"
        echo ""
        echo -e "${CYAN}Try asking Claude:${NC}"
        echo -e "  ${GREEN}‚Ä¢ 'List files in the Kali workspace'${NC}"
        echo -e "  ${GREEN}‚Ä¢ 'Show me the Kali tools reference'${NC}"
        echo -e "  ${GREEN}‚Ä¢ 'Read the ethical hacking guidelines'${NC}"
        echo -e "  ${GREEN}‚Ä¢ 'What scripts are available in the workspace?'${NC}"
        return 0
    else
        print_warning "Claude Desktop not found at /Applications/Claude.app"
        echo "Please open Claude Desktop manually and look for the 'kali-linux-mcp' server"
        return 1
    fi
}

# Show final success screen
show_final_success() {
    clear
    echo ""
    echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${GREEN}‚ïë                                                               ‚ïë${NC}"
    echo -e "${GREEN}‚ïë  üéâ KALI LINUX MCP SERVER SETUP COMPLETE! üéâ                ‚ïë${NC}"
    echo -e "${GREEN}‚ïë                                                               ‚ïë${NC}"
    echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${YELLOW}‚úÖ What we accomplished:${NC}"
    echo -e "   üîë SSH key generated and installed"
    echo -e "   üê≥ Docker MCP server built locally"  
    echo -e "   üìÅ Kali workspace created with tools and samples"
    echo -e "   ‚öôÔ∏è  Claude Desktop configured with 'kali-linux-mcp'"
    echo -e "   üöÄ Claude Desktop opened automatically"
    echo ""
    echo -e "${CYAN}üéØ Your Kali Linux is now accessible via Claude Desktop!${NC}"
    echo ""
    echo -e "${GREEN}Happy Ethical Hacking! üêâ${NC}"
    echo ""
}

# Full wizard function (extracted from old main)
run_full_wizard() {
    # Welcome screen
    print_header "WELCOME TO THE AUTOMATED SETUP WIZARD"
    
    echo -e "${GREEN}üéØ This wizard will AUTOMATICALLY set up your Kali Linux MCP server!${NC}"
    echo ""
    echo -e "${YELLOW}What this wizard does:${NC}"
    echo "  ‚Ä¢ Generates SSH keys from scratch"
    echo "  ‚Ä¢ Sets up secure SSH authentication to your Kali VM"
    echo "  ‚Ä¢ Creates a comprehensive workspace with tools and samples"
    echo "  ‚Ä¢ Builds an optimized Docker MCP server locally"
    echo "  ‚Ä¢ Configures Claude Desktop automatically"
    echo "  ‚Ä¢ Tests the complete setup end-to-end"
    echo "  ‚Ä¢ Opens Claude Desktop for immediate use"
    echo ""
    echo -e "${BLUE}Requirements:${NC}"
    echo "  ‚Ä¢ Your Kali Linux VM is running and accessible"
    echo "  ‚Ä¢ You know the VM IP, username, and password"
    echo "  ‚Ä¢ Docker is available (via Orbstack or Docker Desktop)"
    echo ""
    
    if ! ask_yes_no "üöÄ Ready to start the AUTOMATED setup?"; then
        echo "Setup cancelled. Returning to main menu..."
        return 0
    fi
    
    # Get connection details
    print_header "KALI VM CONNECTION DETAILS"
    
    echo -e "${CYAN}Please provide your Kali VM connection information:${NC}"
    echo ""
    
    while true; do
        read -p "Kali VM IP address: " KALI_VM_IP
        if [[ $KALI_VM_IP =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            break
        else
            echo -e "${RED}Please enter a valid IP address format${NC}"
        fi
    done
    
    read -p "VM username (default: kali): " vm_user_input
    KALI_USERNAME=${vm_user_input:-kali}
    
    echo -n "VM password: "
    read -s KALI_PASSWORD
    echo
    
    read -p "SSH port (default: 22): " ssh_port_input
    SSH_PORT=${ssh_port_input:-22}
    
    echo ""
    echo -e "${GREEN}Connection Details Confirmed:${NC}"
    echo "  IP: $KALI_VM_IP"
    echo "  Username: $KALI_USERNAME"
    echo "  Password: [HIDDEN]"
    echo "  SSH Port: $SSH_PORT"
    echo ""
    
    if ! ask_yes_no "üîç Are these details correct?"; then
        echo "Please restart the wizard to re-enter connection details."
        return 1
    fi
    
    # Run the automated setup sequence
    print_header "AUTOMATED SETUP IN PROGRESS"
    
    echo -e "${YELLOW}ü§ñ Starting automated setup sequence...${NC}"
    echo ""
    
    # Step 1: SSH Authentication
    if ! setup_ssh_authentication "$KALI_VM_IP" "$KALI_USERNAME" "$KALI_PASSWORD" "$SSH_PORT"; then
        print_error "SSH authentication setup failed"
        return 1
    fi
    
    # Step 2: Kali Workspace Setup
    if ! setup_kali_workspace "$KALI_VM_IP" "$KALI_USERNAME" "$SSH_PORT"; then
        print_error "Kali workspace setup failed"
        return 1
    fi
    
    # Step 3: Build Docker Image
    if ! build_docker_image; then
        print_error "Docker image build failed"
        return 1
    fi
    
    # Step 4: Configure Claude Desktop
    if ! configure_claude_desktop "$KALI_VM_IP" "$KALI_USERNAME" "$SSH_PORT"; then
        print_error "Claude Desktop configuration failed"
        return 1
    fi
    
    # Step 5: Test Complete Setup
    test_complete_setup "$KALI_VM_IP" "$KALI_USERNAME" "$SSH_PORT" || true
    
    # Step 6: Open Claude Desktop
    open_claude_desktop || true
    
    # Show final success screen
    show_final_success
    
    # Keep terminal open for a moment
    echo -e "${CYAN}Press any key to return to main menu...${NC}"
    read -n 1 -s
}

# Main function with menu system
main() {
    # Check for command line arguments
    case "${1:-}" in
        --wizard|-w)
            run_full_wizard
            exit 0
            ;;
        --clean|-c)
            clean_all_configurations
            exit 0
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        --repair|-r)
            repair_configuration
            exit 0
            ;;
        --guide|-g)
            show_setup_guide
            exit 0
            ;;
    esac
    
    # Main menu loop
    while true; do
        show_main_menu
        
        get_menu_choice
        local choice=$?
        
        case $choice in
            1)
                # Full Setup Wizard
                if run_full_wizard; then
                    echo ""
                    print_success "Wizard completed successfully!"
                else
                    echo ""
                    print_error "Wizard encountered errors"
                fi
                echo ""
                echo -e "${CYAN}Press any key to continue...${NC}"
                read -n 1 -s
                ;;
            2)
                # Repair/Fix
                if repair_configuration; then
                    if [ $? -eq 1 ]; then
                        # Repair suggested running full wizard
                        run_full_wizard
                    fi
                fi
                echo ""
                echo -e "${CYAN}Press any key to continue...${NC}"
                read -n 1 -s
                ;;
            3)
                # Clean/Reset
                clean_all_configurations
                echo -e "${CYAN}Press any key to continue...${NC}"
                read -n 1 -s
                ;;
            4)
                # Setup Guide
                show_setup_guide
                ;;
            5)
                # Help
                show_help
                ;;
            6)
                # Exit
                print_header "GOODBYE FROM KALI DRAGON!"
                echo -e "${GREEN}üêâ Thanks for using Kali Dragon!${NC}"
                echo -e "${CYAN}üí° Remember: Always hack ethically and responsibly${NC}"
                echo ""
                exit 0
                ;;
        esac
    done
}

# Run Kali Dragon
main "$@"
